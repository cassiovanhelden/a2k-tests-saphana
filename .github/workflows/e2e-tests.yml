name: e2e_test

on:
    schedule:
      - cron: '0 0 * * MON'
    push:
      branches: [ dev ]
    pull_request:
      branches: [ dev ]

    workflow_dispatch:
        inputs:
            testList:
                description: 'Test map'
                required: false
                default:
            logLevel:
                description: 'Log level'
                required: true
                default: 'warning'
            tags:
                description: 'Test scenario tags'

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Check out code
              uses: actions/checkout@v2

            - name: Setup node
              uses: actions/setup-node@v1
              with:
                  node-version: '12'

            - uses: microsoft/playwright-github-action@v1

            - name: Install dependencies
              run: yarn install  --frozen-lockfile

            - name: Export secrets
              run: |
                  echo "CONFIG_CLIENT_ID=${{ secrets.CONFIG_CLIENT_ID}}" >> $GITHUB_ENV;
                  echo "CONFIG_CLIENT_SECRET=${{ secrets.CONFIG_CLIENT_SECRET}}" >> $GITHUB_ENV;
                  echo "CONFIG_CUSTOMER_ID=${{ secrets.CONFIG_CUSTOMER_ID}}" >> $GITHUB_ENV;
                  echo "CONFIG_CWA_API=${{ secrets.CONFIG_CWA_API}}" >> $GITHUB_ENV;
                  echo "CONFIG_IDP=${{ secrets.CONFIG_IDP}}" >> $GITHUB_ENV;
                  echo "CONFIG_MICROAPPS_ADMIN_URL=${{ secrets.CONFIG_MICROAPPS_ADMIN_URL}}" >> $GITHUB_ENV;
                  echo "CONFIG_WORKSPACE_PASSWORD=${{ secrets.CONFIG_WORKSPACE_PASSWORD}}" >> $GITHUB_ENV;
                  echo "CONFIG_WORKSPACE_URL=${{ secrets.CONFIG_WORKSPACE_URL}}" >> $GITHUB_ENV;
                  echo "CONFIG_WORKSPACE_USERNAME=${{ secrets.CONFIG_WORKSPACE_USERNAME}}" >> $GITHUB_ENV;
                  echo "USERNAME=${{ secrets.USERNAME}}" >> $GITHUB_ENV;
                  echo "PASSWORD=${{ secrets.PASSWORD}}" >> $GITHUB_ENV;
              shell: bash

            - name: Run tests
              run: |
                  echo "startDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
                  yarn jest -i --json --outputFile=artifacts/report.json --testNamePattern="${{github.event.inputs.testList}}" src/__tests__
              shell: bash

            - name: Upload artifacts
              if: always()
              uses: actions/upload-artifact@v2
              with:
                  name: test-artifacts
                  path: artifacts/

            - name: Send Notification to Slack - Failure
              if: ${{ failure() }}
              uses: rtCamp/action-slack-notify@master
              env:
                  SLACK_CHANNEL: wsi-factory-test-results
                  SLACK_COLOR: '#E01E5A'
                  SLACK_TITLE: Test status
                  SLACK_MESSAGE: ':warning: *Repository:* ${{ github.event.repository.name}}  *Result:* ${{ job.status }} :warning:'
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  MSG_MINIMAL: false

            - name: Send Notification to Slack - Success
              uses: rtCamp/action-slack-notify@master
              env:
                  SLACK_CHANNEL: wsi-factory-test-results
                  SLACK_COLOR: '#80FF33'
                  SLACK_TITLE: Test status
                  SLACK_MESSAGE: ':success-icon: *Repository:* ${{ github.event.repository.name}}  *Result:* ${{ job.status }} :success-icon:'
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  MSG_MINIMAL: false

            - name: Send Report to Power BI
              run: |
                  echo $startDate
                  export "customerID=${{ secrets.CONFIG_CUSTOMER_ID }}" >> $GITHUB_ENV
                  export serverVersionrTest=$(curl -k -s https:///$customerID.us.iws.cloud.com/status/up | jq -r '.version')
                  echo $serverVersionrTest
                  export runNumber="${{ github.run_number }}"
                  export workflowName="${{ github.workflow }}"
                  export repositoryName="${{ github.event.repository.name}}"
                  export endDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  cat artifacts/report.json | jq  -r --arg buildID "$runNumber" --arg jobName "$workflowName" --arg integrationName "$repositoryName" --arg startTime "$startDate" --arg endTime "$endDate" --arg serverVersionrTest "$serverVersionrTest" \
                      '[{
                      "buildID":($buildID)|tonumber,
                      "startTime":$startTime,
                      "customerIDCC":$customerID,
                      "versionMAServer":$serverVersionrTest,
                      "integrationName":$integrationName,
                      "passed":.numPassedTests,
                      "failed":.numFailedTests,
                      "skipped":.numPendingTests,
                      "total":.numTotalTests,
                      "endTime":$endTime,
                      "jobName":$jobName,
                      }]' > report_power_bi.json
                  cat report_power_bi.json
                  curl --include \
                      --request POST \
                      --header "Content-Type: application/json" \
                      --data-binary @report_power_bi.json \
                      "${{ secrets.POWER_BI_API_KEY }}"

              shell: bash
